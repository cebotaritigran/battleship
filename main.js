/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n  font: 1em / 1.25 \"PT Sans\", arial, sans-serif;\n}\n\nbody {\n  background-color: rgb(250, 246, 246);\n  margin: 0;\n  padding: 0;\n  gap: 10px;\n}\n\n.body-wrap {\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n  gap: 100px;\n}\n\n.header {\n  flex: 1 1 0;\n  display: flex;\n  gap: 10px;\n  padding: 0px 110px 0px 210px;\n  text-align: left;\n  font-size: 30px;\n  font-weight: bolder;\n}\n\n.main {\n  display: flex;\n  flex: 1 1 0;\n  justify-content: center;\n}\n\n.game {\n  display: flex;\n  flex: 0 1 0;\n  gap: 110px;\n}\n\n.player-container {\n  display: grid;\n  grid-template-columns: 1fr 9fr 1fr;\n  grid-template-rows: 1fr 9fr 2fr;\n  flex: 1 1 0;\n\n\n}\n\n.grid-numbers {\n  grid-column: 1/1;\n  grid-row: 2/ 2;\n  display: flex;\n  width: 40px;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n}\n\n.grid-letters {\n  grid-column: 2/2;\n  grid-row: 1/1;\n  display: flex;\n\n  align-items: center;\n  text-align: center;\n\n}\n\n.grid-container {\n  display: flex;\n  width: 300px;\n  height: 300px;\n  flex-wrap: wrap;\n  grid-column: 2/2;\n  grid-row: 2;\n}\n\n.turn-shower {\n  grid-column: 2/2;\n  grid-row: 2;\n  width: 300px;\n  height: 300px;\n  background-color: rgb(224, 224, 224);\n  opacity: 0.5;\n}\n\n.letters,\n.numbers {\n  flex: 1 1 0;\n  display: flex;\n\n  flex-direction: column;\n  justify-content: center;\n\n}\n\n.grid-box {\n  border: 1px solid rgb(201, 221, 255);\n  flex: 1 1 9%;\n  cursor: pointer;\n}\n\n\n\n\n.grid-box:hover {\n  background-color: rgb(186, 190, 196);\n}\n\n.ship-box {\n  background-color: rgb(78, 78, 210);\n}\n\n.ship-hit {\n  background-color: red;\n  pointer-events: none;\n}\n\n.ship-miss {\n  background-color: rgb(107, 204, 82);\n  pointer-events: none;\n}\n\n.randomise {\n  grid-row: 3/3;\n  grid-column: 1/ 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n\n.randomise:hover{\n  color: rgb(99, 15, 195);\n  user-select: none;\n  \n}\n\n.reset-button {\n  height: 40px;\n  width: 180px;\n  font-size: 32px;\n  border: none;\n  outline: none;\n  background-color: rgb(255, 79, 79);\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n}\n\n.reset-button:hover {\n  background-color: rgb(255, 50, 50);\n  color: rgb(255, 255, 255);\n}\n\n.reset-button:active {\n  background-color: rgb(224, 15, 15);\n}\n\n.options {\n  display: flex;\n  color: rgb(92, 92, 92);\n  padding: 0px 110px 0px 210px;\n  gap: 20px;\n  margin-top: 20px;\n  justify-content: center;\n  align-items: center;\n}\n\n.player-player,\n.player-ai,\n.reset {\n  cursor: pointer;\n  color: rgb(92, 92, 92);\n  user-select: none;\n}\n.player-player:hover,\n.player-ai:hover,\n.reset:hover {\n  cursor: pointer;\n  color: rgb(247, 35, 35);\n  user-select: none;\n}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://battleship/./src/styles.css?./node_modules/css-loader/dist/cjs.js\n}");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://battleship/./node_modules/css-loader/dist/runtime/api.js?\n}");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://battleship/./node_modules/css-loader/dist/runtime/noSourceMaps.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/insertBySelector.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/insertStyleElement.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("{\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/styleDomAPI.js?\n}");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("{\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://battleship/./node_modules/style-loader/dist/runtime/styleTagTransform.js?\n}");

/***/ }),

/***/ "./src/eventListenerController.js":
/*!****************************************!*\
  !*** ./src/eventListenerController.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detachListeners: () => (/* binding */ detachListeners)\n/* harmony export */ });\n/* harmony import */ var _src_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/script */ \"./src/script.js\");\nconst { Gameboard } = __webpack_require__(/*! ../src/gameboard */ \"./src/gameboard.js\");\nconst { Ship } = __webpack_require__(/*! ../src/ship */ \"./src/ship.js\");\nconst { Player } = __webpack_require__(/*! ../src/player */ \"./src/player.js\");\nconst { checkObject } = __webpack_require__(/*! ../src/object */ \"./src/object.js\");\nconst { putShipsOnBoard } = __webpack_require__(/*! ../src/gameboardRenderer */ \"./src/gameboardRenderer.js\");\n\n\nfunction detachListeners(cells, remove) {\n    if (remove == true) {\n        for (let i = 0; i < 100; i++) {\n\n            cells[i].removeEventListener(\"click\", _src_script__WEBPACK_IMPORTED_MODULE_0__.gameController.turn)\n        }\n    } else {\n        for (let i = 0; i < 100; i++) {\n\n            cells[i].addEventListener(\"click\", _src_script__WEBPACK_IMPORTED_MODULE_0__.gameController.turn)\n        }\n    }\n\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/eventListenerController.js?\n}");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{const { destroyer, Ship } = __webpack_require__(/*! ../src/ship */ \"./src/ship.js\");\nconst { checkObject } = __webpack_require__(/*! ../src/object */ \"./src/object.js\");\nclass Gameboard {\n    constructor(missedAttacks, coordinates) {\n        this.missedAttacks = missedAttacks;\n        this.allShipsSunk = false;\n        this.coordinates = [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        ]\n    }\n\n    checkShipsSunk() {\n        // for (let i = 0; i < 10; i++) {\n        //     for (let k = 0; k < 10; k++) {\n\n        //     }\n        // }\n        for (let i = 0; i < this.coordinates.length; i++) {\n            // if there is ship not sink\n            if (this.coordinates[i].some(checkObject)) {\n\n                this.allShipsSunk = false;\n                return this.allShipsSunk;\n            } else if (this.coordinates[i].some(checkObject) == false) {\n                this.allShipsSunk = true;\n\n            }\n\n        }\n\n        return this.allShipsSunk;\n    }\n\n    placeShip(coordinatesY, coordinatesX, length, lineDirection, ship) {\n\n        this.coordinates[coordinatesY][coordinatesX] = ship\n        if (lineDirection == \"vertical\") {\n            for (let i = 0; i < length; i++) {\n\n\n                if (coordinatesY + length > this.coordinates.length) {\n                    throw new Error(\"Ship goes out of bounds vertically\" + coordinatesY + length);\n                }\n                this.coordinates[coordinatesY + i][coordinatesX] = ship\n\n\n            }\n        } else if (lineDirection == \"horizontal\") {\n            for (let i = 0; i < length; i++) {\n                this.coordinates[coordinatesY][coordinatesX + i] = ship\n            }\n        }\n\n        return this.coordinates;\n    }\n\n    receiveAttack(coordinatesY, coordinatesX) {\n        console.log(coordinatesY, coordinatesX)\n        // if (this.coordinates[coordinatesY][coordinatesX] == undefined || this.coordinates[coordinatesY][coordinatesX] == null) {\n        //     this.coordinates[coordinatesY][coordinatesX] = 1\n        // }\n        console.log(coordinatesY, coordinatesX)\n        if (this.coordinates[coordinatesY][coordinatesX] != 0 && this.coordinates[coordinatesY][coordinatesX] != 1 && this.coordinates[coordinatesY][coordinatesX] != 2) {\n            this.coordinates[coordinatesY][coordinatesX].hit();\n            //this.coordinates[coordinatesY][coordinatesX] = 2\n            return true;\n        } else {\n            this.coordinates[coordinatesY][coordinatesX] = 1\n            return false\n        }\n        // removed by dead control flow\n{}\n    }\n\n    cleanBoard() {\n        this.coordinates = [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        ]\n    }\n\n\n}\n\nlet game = new Gameboard(0)\n\nmodule.exports = { Gameboard };\n\n//# sourceURL=webpack://battleship/./src/gameboard.js?\n}");

/***/ }),

/***/ "./src/gameboardRenderer.js":
/*!**********************************!*\
  !*** ./src/gameboardRenderer.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{const { Gameboard } = __webpack_require__(/*! ../src/gameboard */ \"./src/gameboard.js\");\nconst { Ship } = __webpack_require__(/*! ../src/ship */ \"./src/ship.js\");\nconst { Player } = __webpack_require__(/*! ../src/player */ \"./src/player.js\");\nconst { checkObject } = __webpack_require__(/*! ../src/object */ \"./src/object.js\");\n\nfunction putShipsOnBoard(board, gameBoard, gameController) {\n    for (let i = 0; i < 10; i++) {\n        for (let k = 0; k < 10; k++) {\n            let gridBox = document.createElement(\"div\");\n            gridBox.classList.add(\"grid-box\")\n            board.appendChild(gridBox)\n            gridBox.addEventListener(\"click\", () => { gameController.turn(gridBox) })\n            gridBox.setAttribute(\"coordinatesY\", i)\n            gridBox.setAttribute(\"coordinatesX\", k)\n            if (gameBoard.coordinates[i][k] != undefined || gameBoard.coordinates[i][k] != null) {\n                if (gameBoard.coordinates[i][k] != 0) {\n                    gridBox.classList.add(\"ship-box\")\n                }\n            }\n\n        }\n    }\n}\n\nmodule.exports = { putShipsOnBoard };\n\n//# sourceURL=webpack://battleship/./src/gameboardRenderer.js?\n}");

/***/ }),

/***/ "./src/object.js":
/*!***********************!*\
  !*** ./src/object.js ***!
  \***********************/
/***/ ((module) => {

eval("{function checkObject(element, index, array) {\n\n    return typeof element == \"object\";\n}\n\nmodule.exports = { checkObject };\n\n//# sourceURL=webpack://battleship/./src/object.js?\n}");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{const { Gameboard } = __webpack_require__(/*! ./gameboard */ \"./src/gameboard.js\");\n\nclass Player {\n    constructor(gmaeBoard, playerName, turn) {\n        this.gmaeBoard = gmaeBoard;\n        this.playerName = playerName\n        this.turn = turn;\n    }\n    checkGameBoard(){\n        return this.gmaeBoard.coordinates;\n    }\n}\n\nmodule.exports = { Player };\n\n//# sourceURL=webpack://battleship/./src/player.js?\n}");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gameController: () => (/* binding */ gameController)\n/* harmony export */ });\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ \"./src/styles.css\");\n/* harmony import */ var _src_eventListenerController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/eventListenerController */ \"./src/eventListenerController.js\");\n\nconst { Gameboard } = __webpack_require__(/*! ../src/gameboard */ \"./src/gameboard.js\");\nconst { Ship } = __webpack_require__(/*! ../src/ship */ \"./src/ship.js\");\nconst { Player } = __webpack_require__(/*! ../src/player */ \"./src/player.js\");\nconst { checkObject } = __webpack_require__(/*! ../src/object */ \"./src/object.js\");\nconst { putShipsOnBoard } = __webpack_require__(/*! ../src/gameboardRenderer */ \"./src/gameboardRenderer.js\");\n\n\n\nlet vsAiActive = false;\n\nlet playerContainer = document.querySelectorAll(\".player-container\")\n\nlet gridContainer = document.querySelectorAll(\".grid-container\")\n\nlet randomise = document.querySelectorAll(\".randomise\")\n\nlet playerVsAiOption = document.querySelector(\".player-ai\")\n\nlet playerVsPlayerOption = document.querySelector(\".player-player\")\n\nlet turnShower = document.querySelectorAll(\".turn-shower\")\n\nlet reset = document.querySelector(\".reset\")\n\nlet options = document.querySelector(\".options\")\n\nlet modeChosen = false;\n\n\n\nreset.addEventListener(\"click\", () => {\n    window.location.reload(true);\n})\n\nlet lockPositionPlayerOne = document.createElement(\"div\")\nlet lockPositionPlayerTwo = document.createElement(\"div\")\nlockPositionPlayerOne.textContent = \"Lock Position for Player 1\"\nlockPositionPlayerTwo.textContent = \"Lock Position for Player 2\"\nlockPositionPlayerOne.classList.add(\"lock-player-one\")\nlockPositionPlayerTwo.classList.add(\"lock-player-two\")\n\n\nplayerVsAiOption.addEventListener(\"click\", () => {\n    if (!modeChosen) {\n        randomiseSecondBoard()\n        let ships = gridContainer[1].children\n        vsAiActive = true;\n        for (let ship of ships) {\n            ship.classList.remove(\"ship-box\")\n        }\n        playerContainer[0].removeChild(randomise[0])\n        playerContainer[1].removeChild(randomise[1])\n        modeChosen = true;\n    } else {\n        alert(\"Reset before choosing another mode\");\n    }\n})\n\nplayerVsPlayerOption.addEventListener(\"click\", () => {\n    if (!modeChosen) {\n        options.appendChild(lockPositionPlayerOne)\n        options.appendChild(lockPositionPlayerTwo)\n        modeChosen = true;\n    } else {\n        alert(\"Reset before choosing another mode\");\n    }\n\n})\n\nlockPositionPlayerOne.addEventListener(\"click\", () => {\n    playerContainer[0].removeChild(randomise[0])\n    let ships = gridContainer[0].children\n    for (let ship of ships) {\n        ship.classList.remove(\"ship-box\")\n    }\n})\n\nlockPositionPlayerTwo.addEventListener(\"click\", () => {\n    playerContainer[1].removeChild(randomise[1])\n    let ships = gridContainer[1].children\n    for (let ship of ships) {\n        ship.classList.remove(\"ship-box\")\n    }\n})\n\n\n\n\nturnShower[1].classList.toggle(\"turn-shower\")\n\nconst gameController = (() => {\n    let playerTurn = 0;\n    let gameEnded = false;\n    const resetGame = () => {\n        const resetButton = document.querySelector('.reset-button')\n        resetButton.addEventListener('click', () => {\n            gameEnded = false;\n            let game = document.querySelector(\".game\")\n            putShipsOnBoard(gridContainer[0], gameBoardPlayerOne);\n            putShipsOnBoard(gridContainer[1], gameBoardPlayerTwo);\n        })\n    }\n\n    //by checking which gameboards ships sunk we can see who won the game\n    const checkEndGame = (board) => {\n        gameEnded = board;\n\n        if (gameBoardPlayerOne.allShipsSunk == true && gameEnded == false) {\n            gameEnded = true;\n            return alert(\"player 2 won\")\n        }\n        if (gameBoardPlayerTwo.allShipsSunk == true && gameEnded == false) {\n            gameEnded = true;\n            return alert(\"player 1 won\")\n        }\n        if (gameEnded == true) {\n            return alert(\"Reset before playing again\")\n        }\n        return gameBoardPlayerOne.allShipsSunk;\n    }\n\n    const turn = (gridBox) => {\n        if (modeChosen == false) {\n            alert(\"Choose a mode from bottom to be able to play\")\n            window.location.reload(true);\n        }\n        let tmp = gridBox;\n        console.log(vsAiActive)\n        // PLAYER 1 TURN\n        if (playerTurn == 0) {\n            // this is how we show whose turn it is\n            // turnShower[1].classList.toggle(\"turn-shower\")\n            // turnShower[0].classList.toggle(\"turn-shower\")\n\n            playerOne.turn = false;\n            playerTwo.turn = true;\n            console.log(gridBox)\n            //getting the current gridbox's coordinates\n            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesY\");\n            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesX\");\n\n\n            // if the clicked grid box is a \"ship\"\n            //and receiveAttack returns true the ship gets a hit\n            if (gameBoardPlayerTwo.receiveAttack(gridBoxCoordinatesY, gridBoxCoordinatesX) == true) {\n                // we add a ship hit class for UI\n                gridBox.classList.add(\"ship-hit\")\n                // here we need enemys board and elemets to change the surrounding grid boxes of the sunk ship\n                // we first get all the child notes and then if its horizontal we just need to bottom + 1 of the ship and\n                // top - 1 that way we get all the surrounding boxes including cross hits\n                let gridBoxes = gridContainer[1].childNodes;\n                // we need ship.length to determine the bottom of the ship and if its sunk which box to mark as \"miss\"\n                let shipLength = gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length;\n                // original ship coordinates to determine which boxes to mark as \"miss\"\n                let shipCoordinateY = gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[0]\n                let shipCoordinateX = gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[1]\n\n                console.log(gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk())\n                // if ship sunk mark top and bottom of the ship as \"miss\"\n                if (gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                    gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"vertical\" &&\n                    gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                    gridBoxes.forEach((gridBox) => {\n\n\n                        let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                        let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                        //TOP\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n                        // BOTTOM\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY + shipLength) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n                        console.log(gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length)\n\n                    })\n                    // if ship sunk mark right and left of the ship as \"miss\"\n                } else if (gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                    gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"horizontal\" &&\n                    gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                    gridBoxes.forEach((gridBox) => {\n\n\n                        let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                        let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                        // LEFT\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n                        // right\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX + shipLength)) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n\n\n                    })\n                }\n                // this condition is for only \"small\" ships with length 1\n                // because we already mark \"miss\" the cross cells\n                // we mark the rest 4 cells of the ship as \"miss\"\n                if (gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                    gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length == 1) {\n                    gridBoxes.forEach((gridBox) => {\n\n\n                        let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                        let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                        // LEFT\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n                        // right\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) + 1) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n\n\n                        //TOP\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n                        // BOTTOM\n                        if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) + 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                            gridBox.classList.add(\"ship-miss\")\n\n                        }\n\n\n                    })\n\n                }\n                // cross hits, if it hits the ship all the cross surrounding boxes are marked as \"miss\"\n                gridBoxes.forEach((gridBox) => {\n                    let coordinatesYY = gridBox.getAttribute(\"coordinatesy\");\n                    let coordinatesXX = gridBox.getAttribute(\"coordinatesx\");\n                    if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                        gridBox.classList.add(\"ship-miss\")\n\n                    }\n                    if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                        gridBox.classList.add(\"ship-miss\")\n\n                    }\n                    if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                        gridBox.classList.add(\"ship-miss\")\n\n                    }\n                    if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                        gridBox.classList.add(\"ship-miss\")\n\n                    }\n                })\n\n                gameBoardPlayerTwo.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX] = 2;\n            } else {\n                // IF MISSES\n\n                gridBox.classList.add(\"ship-miss\")\n                console.log(\"play 1 played\")\n                playerTurn++;\n                // this is how we show whose turn it is on ui\n                turnShower[1].classList.toggle(\"turn-shower\")\n                turnShower[0].classList.toggle(\"turn-shower\")\n                // if player chose to play againts ai\n                // we need to prompt ai's turn without needing \n                // for someone to click on the board\n                if (vsAiActive) { gameController.turn() }\n            }\n            checkEndGame(gameBoardPlayerTwo.checkShipsSunk());\n            // PLAYER 2 TURN\n        } else if (playerTurn == 1) {\n            if (vsAiActive) {\n\n                let gridBoxCoordinatesY = Math.floor(Math.random() * 10)\n                let gridBoxCoordinatesX = Math.floor(Math.random() * 10)\n                playerOne.turn = true;\n                playerTwo.turn = false;\n                if (gameBoardPlayerOne.receiveAttack(gridBoxCoordinatesY, gridBoxCoordinatesX) == true) {\n                    // here we need enemys board and elemets to change the surrounding grid boxes of the sunk ship\n                    // we first get all the child notes and then if its horizontal we just need to bottom + 1 of the ship and\n                    // top - 1 that way we get all the surrounding boxes including cross hits\n                    let gridBoxes = gridContainer[0].childNodes;\n                    // we need ship.length to determine the bottom of the ship and if its sunk which box to mark as \"miss\"\n                    let shipLength = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length;\n                    // original ship coordinates to determine which boxes to mark as \"miss\"\n                    let shipCoordinateY = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[0]\n                    let shipCoordinateX = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[1]\n                    gridBoxes.forEach((gridBox) => {\n                        let gridBoxCoordinatesYFromElement = gridBox.getAttribute(\"coordinatesy\");\n                        let gridBoxCoordinatesXFromElement = gridBox.getAttribute(\"coordinatesx\");\n                        if (gridBoxCoordinatesYFromElement == gridBoxCoordinatesY && gridBoxCoordinatesXFromElement == gridBoxCoordinatesX) {\n                            gridBox.classList.add(\"ship-hit\")\n                        }\n                    })\n\n                    console.log(\"hit\")\n                    // if ship sunk mark top and bottom of the ship as \"miss\"\n                    if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"vertical\" &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            //TOP\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n                            // BOTTOM\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY + shipLength) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n                        // if ship sunk mark right and left of the ship as \"miss\"\n                    } else if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"horizontal\" &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            // LEFT\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // right\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX + shipLength)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n                    }\n                    if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length == 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            // LEFT\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // right\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) + 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                            //TOP\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // BOTTOM\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) + 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n\n                    }\n                    // cross hits, if it hits the ship all the cross surrounding boxes are marked as \"miss\"\n                    gridBoxes.forEach((gridBox) => {\n                        let coordinatesYY = gridBox.getAttribute(\"coordinatesy\");\n                        let coordinatesXX = gridBox.getAttribute(\"coordinatesx\");\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                    })\n                    gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX] = 2;\n                    gameController.turn(tmp);\n                } else {\n                    let gridBoxes = gridContainer[0].childNodes;\n                    gridBoxes.forEach((gridBox) => {\n                        let gridBoxCoordinatesYFromElement = gridBox.getAttribute(\"coordinatesy\");\n                        let gridBoxCoordinatesXFromElement = gridBox.getAttribute(\"coordinatesx\");\n                        if (gridBoxCoordinatesYFromElement == gridBoxCoordinatesY && gridBoxCoordinatesXFromElement == gridBoxCoordinatesX) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                    })\n                    playerTurn--;\n                    console.log(\"player 2 played\")\n                    // this is how we show whose turn it is on ui\n                    turnShower[0].classList.toggle(\"turn-shower\")\n                    turnShower[1].classList.toggle(\"turn-shower\")\n                }\n\n                checkEndGame(gameBoardPlayerOne.checkShipsSunk());\n\n            } else {\n                playerOne.turn = true;\n                playerTwo.turn = false;\n\n                //getting the current gridbox's coordinates\n                let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesY\");\n                let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesX\");\n\n\n                // if the clicked grid box is a \"ship\"\n                //and receiveAttack returns true the ship gets a hit\n                if (gameBoardPlayerOne.receiveAttack(gridBoxCoordinatesY, gridBoxCoordinatesX) == true) {\n                    // we add a ship hit class for UI\n                    gridBox.classList.add(\"ship-hit\")\n                    // here we need enemys board and elemets to change the surrounding grid boxes of the sunk ship\n                    // we first get all the child notes and then if its horizontal we just need to bottom + 1 of the ship and\n                    // top - 1 that way we get all the surrounding boxes including cross hits\n                    let gridBoxes = gridContainer[0].childNodes;\n                    // we need ship.length to determine the bottom of the ship and if its sunk which box to mark as \"miss\"\n                    let shipLength = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length;\n                    // original ship coordinates to determine which boxes to mark as \"miss\"\n                    let shipCoordinateY = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[0]\n                    let shipCoordinateX = gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipCoordinate[1]\n\n\n                    // if ship sunk mark top and bottom of the ship as \"miss\"\n                    if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"vertical\" &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            //TOP\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n                            // BOTTOM\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY + shipLength) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n                        // if ship sunk mark right and left of the ship as \"miss\"\n                    } else if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].shipDirection == \"horizontal\" &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length != 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            // LEFT\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // right\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX + shipLength)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n                    }\n                    if (gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].isSunk() &&\n                        gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX].length == 1) {\n                        gridBoxes.forEach((gridBox) => {\n\n\n                            let gridBoxCoordinatesY = gridBox.getAttribute(\"coordinatesy\");\n                            let gridBoxCoordinatesX = gridBox.getAttribute(\"coordinatesx\");\n\n\n                            // LEFT\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) - 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // right\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) && Number(gridBoxCoordinatesX) == Number(shipCoordinateX) + 1) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                            //TOP\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) - 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n                            // BOTTOM\n                            if (Number(gridBoxCoordinatesY) == Number(shipCoordinateY) + 1 && Number(gridBoxCoordinatesX) == Number(shipCoordinateX)) {\n                                gridBox.classList.add(\"ship-miss\")\n\n                            }\n\n\n                        })\n\n                    }\n                    // cross hits, if it hits the ship all the cross surrounding boxes are marked as \"miss\"\n                    gridBoxes.forEach((gridBox) => {\n                        let coordinatesYY = gridBox.getAttribute(\"coordinatesy\");\n                        let coordinatesXX = gridBox.getAttribute(\"coordinatesx\");\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) - 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) + 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                        if (Number(coordinatesYY) == Number(gridBoxCoordinatesY) + 1 && Number(coordinatesXX) == Number(gridBoxCoordinatesX) - 1) {\n                            gridBox.classList.add(\"ship-miss\")\n                        }\n                    })\n\n                    gameBoardPlayerOne.coordinates[gridBoxCoordinatesY][gridBoxCoordinatesX] = 2;\n                } else {\n                    gridBox.classList.add(\"ship-miss\")\n\n                    console.log(\"player 2 played\")\n                    playerTurn--;\n                    // this is how we show whose turn it is on ui\n                    turnShower[0].classList.toggle(\"turn-shower\")\n                    turnShower[1].classList.toggle(\"turn-shower\")\n                }\n\n\n                checkEndGame(gameBoardPlayerOne.checkShipsSunk());\n            }\n\n        }\n\n    }\n\n    const checkHit = () => {\n\n    }\n    return { resetGame, turn, checkHit };\n})()\n\n\n\n\nlet gameBoardPlayerOne = new Gameboard(0)\nlet playerOne = new Player(gameBoardPlayerOne, \"tigran\", true)\n\n\nlet gameBoardPlayerTwo = new Gameboard(0)\nlet playerTwo = new Player(gameBoardPlayerTwo, \"ai\", false)\n\n\n\nfunction placeRandomShip(gameBoard) {\n    let randomMoves = [\n        [\n            [5, 2, \"vertical\", \"huge\"],\n            [1, 2, \"vertical\", \"long\"],\n            [1, 7, \"horizontal\", \"long\"],\n            [1, 5, \"vertical\", \"medium\"],\n            [8, 6, \"horizontal\", \"medium\"],\n            [4, 6, \"horizontal\", \"medium\"],\n            [6, 0, \"vertical\", \"small\"],\n            [6, 4, \"vertical\", \"small\"],\n            [6, 6, \"vertical\", \"small\"],\n            [5, 9, \"vertical\", \"small\"],\n        ], [\n            [9, 5, \"horizontal\", \"huge\"],\n            [3, 5, \"vertical\", \"long\"],\n            [2, 9, \"vertical\", \"long\"],\n            [1, 3, \"vertical\", \"medium\"],\n            [0, 8, \"horizontal\", \"medium\"],\n            [8, 1, \"vertical\", \"medium\"],\n            [6, 0, \"vertical\", \"small\"],\n            [1, 1, \"vertical\", \"small\"],\n            [7, 5, \"vertical\", \"small\"],\n            [6, 7, \"vertical\", \"small\"],\n        ], [\n            [1, 1, \"horizontal\", \"huge\"],\n            [4, 5, \"horizontal\", \"long\"],\n            [6, 3, \"vertical\", \"long\"],\n            [6, 1, \"vertical\", \"medium\"],\n            [6, 7, \"vertical\", \"medium\"],\n            [7, 9, \"vertical\", \"medium\"],\n            [3, 1, \"vertical\", \"small\"],\n            [2, 6, \"vertical\", \"small\"],\n            [2, 8, \"vertical\", \"small\"],\n            [0, 8, \"vertical\", \"small\"],\n        ],\n        [\n            [2, 4, \"vertical\", \"huge\"],\n            [5, 8, \"vertical\", \"long\"],\n            [0, 6, \"vertical\", \"long\"],\n            [3, 1, \"vertical\", \"medium\"],\n            [8, 6, \"vertical\", \"medium\"],\n            [3, 8, \"horizontal\", \"medium\"],\n            [9, 9, \"vertical\", \"small\"],\n            [9, 2, \"horizontal\", \"small\"],\n            [8, 4, \"horizontal\", \"small\"],\n            [7, 0, \"vertical\", \"small\"],\n        ], [\n            [3, 5, \"vertical\", \"huge\"],\n            [0, 0, \"horizontal\", \"long\"],\n            [8, 5, \"horizontal\", \"long\"],\n            [2, 1, \"vertical\", \"medium\"],\n            [6, 2, \"vertical\", \"medium\"],\n            [2, 9, \"vertical\", \"medium\"],\n            [0, 4, \"horizontal\", \"small\"],\n            [8, 0, \"vertical\", \"small\"],\n            [6, 9, \"vertical\", \"small\"],\n            [1, 6, \"vertical\", \"small\"],\n        ], [\n            [6, 3, \"horizontal\", \"huge\"],\n            [5, 9, \"vertical\", \"long\"],\n            [5, 1, \"vertical\", \"long\"],\n            [2, 8, \"horizontal\", \"medium\"],\n            [0, 0, \"vertical\", \"medium\"],\n            [8, 4, \"vertical\", \"medium\"],\n            [9, 2, \"vertical\", \"small\"],\n            [4, 5, \"vertical\", \"small\"],\n            [3, 3, \"horizontal\", \"small\"],\n            [0, 7, \"horizontal\", \"small\"],\n        ],\n    ]\n    let randomPositionSelecter = Math.floor(Math.random() * randomMoves.length);\n\n    for (let [randomY, randomX, shipDirection, shipName] of randomMoves[randomPositionSelecter]) {\n        if (shipName == \"huge\") {\n            let ship = new Ship(4, shipName, [randomY, randomX], shipDirection)\n            gameBoard.placeShip(ship.shipCoordinate[0], ship.shipCoordinate[1], ship.length, ship.shipDirection, ship)\n        }\n        if (shipName == \"small\") {\n            let ship = new Ship(1, shipName, [randomY, randomX], shipDirection)\n            gameBoard.placeShip(ship.shipCoordinate[0], ship.shipCoordinate[1], ship.length, ship.shipDirection, ship)\n        }\n        if (shipName == \"medium\") {\n            let ship = new Ship(2, shipName, [randomY, randomX], shipDirection)\n            gameBoard.placeShip(ship.shipCoordinate[0], ship.shipCoordinate[1], ship.length, ship.shipDirection, ship)\n        }\n        if (shipName == \"long\") {\n            let ship = new Ship(3, shipName, [randomY, randomX], shipDirection)\n            gameBoard.placeShip(ship.shipCoordinate[0], ship.shipCoordinate[1], ship.length, ship.shipDirection, ship)\n        }\n    }\n}\n\nfunction randomiseFirstBoard() {\n\n    gridContainer[0].innerHTML = \"\";\n    gameBoardPlayerOne.cleanBoard();\n    placeRandomShip(gameBoardPlayerOne)\n    putShipsOnBoard(gridContainer[0], gameBoardPlayerOne, gameController);\n}\n\nfunction randomiseSecondBoard() {\n\n    gridContainer[1].innerHTML = \"\";\n    gameBoardPlayerTwo.cleanBoard();\n    placeRandomShip(gameBoardPlayerTwo)\n    putShipsOnBoard(gridContainer[1], gameBoardPlayerTwo, gameController);\n}\n\n// PLACES SHIPS RANDOMLY ON BOTH BOARDS\nrandomise[0].addEventListener(\"click\", randomiseFirstBoard)\n\nrandomise[1].addEventListener(\"click\", randomiseSecondBoard)\n\nplaceRandomShip(gameBoardPlayerOne)\nplaceRandomShip(gameBoardPlayerTwo)\n\nputShipsOnBoard(gridContainer[0], gameBoardPlayerOne, gameController);\nputShipsOnBoard(gridContainer[1], gameBoardPlayerTwo, gameController);\n\n\n\n// function placeRandomShip() {\n//     let ships = [\n//         // Ship count, ship length, ship name\n//         [1, 4, \"huge\"],\n//         [2, 3, \"long\"],\n//         [3, 2, \"medium\"],\n//         [4, 1, \"small\"]\n//     ]\n\n//     ships.forEach(([shipCount, shipLength, shipName]) => {\n\n//         for (let i = 0; i < shipCount; i++) {\n//             let randomNumberY = Math.floor(Math.random() * 10);\n//             let randomNumberX = Math.floor(Math.random() * 10);\n\n//             let randomDirection = Math.floor(Math.random() * 3);\n//             let direction;\n//             if (randomDirection == 1) {\n//                 direction = \"vertical\"\n//             } else {\n//                 direction = \"horizontal\"\n//             }\n//             let ship = new Ship(shipLength, shipName, [randomNumberY, randomNumberX], direction)\n\n//             let maxTries = 2222; // safety cap\n//             let tries = 0;\n\n//             while (tries < maxTries) {\n//                 tries++;\n//                 randomNumberY = Math.floor(Math.random() * 10);\n//                 randomNumberX = Math.floor(Math.random() * 10);\n//                 // checking if the ship is out of bound, if it is\n//                 // we just do continue and not arrive until \"break\" \n//                 // so the while loop starts again and we change\n//                 // coordinates of the ships again\n//                 if (direction === \"vertical\" && randomNumberY + shipLength - 1 >= 10) {\n//                     continue;\n//                 }\n//                 if (direction === \"horizontal\" && randomNumberX + shipLength - 1 >= 10) {\n//                     continue;\n//                 }\n//                 if (randomNumberY < 0) {\n//                     continue;\n//                 }\n//                 if (randomNumberX < 0) {\n//                     continue;\n//                 }\n\n//                 if (checkNeighborCells(randomNumberY, randomNumberX, gameBoardPlayerTwo, ship.length, ship.shipDirection) == false) {\n//                     break;\n//                 }\n\n//             }\n//             if (tries === maxTries) {\n//                 console.warn(`Could not place ${shipName} after ${maxTries} tries`);\n\n//             }\n//             ship.shipCoordinate[0] = randomNumberY\n//             ship.shipCoordinate[1] = randomNumberX\n//             gameBoardPlayerTwo.placeShip(ship.shipCoordinate[0], ship.shipCoordinate[1], shipLength, ship.shipDirection, ship)\n\n//         }\n//     });\n\n\n// }\n\n\n// // checking neighbors cells to be able to put ship, if there is a ship with no cells in between player wont be able to put the ship there\n// function checkNeighborCells(coordinatesY, coordinatesX, gameBoard, shipLength, shipDirection) {\n\n//     let surroundingCells = [[-1, -1], [-1, 0], [-1, 1],\n//     [0, -1], [0, 1],\n//     [1, -1], [1, 0], [1, 1]]\n\n//     let hasNeighbor = false;\n\n//     //this check along the chips by getting ship direction and adding it to coordinates provided\n//     /*if the ship is vertical ->\n//     [] => newCoordinateY = coordinatesY + 0;\n//     [] => newCoordinateY = coordinatesY + 1;\n//     [] => newCoordinateY = coordinatesY + 2*/\n//     for (let i = 0; i < shipLength; i++) {\n\n//         let newCoordinateY = coordinatesY\n//         let newCoordinateX = coordinatesX\n\n//         if (shipDirection == \"vertical\") {\n//             newCoordinateY = coordinatesY + i;\n//         } else {\n//             newCoordinateX = coordinatesX + i;\n//         }\n//         // this checks ship's 8 neighbors\n//         /*\n//           [][][]\n//           []  []\n//           [][][] */\n//         for (let [directionY, directionX] of surroundingCells) {\n//             // checking if the coordinates are out of bound if there is an offset\n//             if (newCoordinateY + directionY < 0 ||\n//                 newCoordinateX + directionX < 0 ||\n//                 newCoordinateY + directionY >= 10 ||\n//                 newCoordinateX + directionX >= 10\n//             ) {\n//                 continue;\n//             }\n//             if (gameBoard.coordinates[newCoordinateY + directionY][newCoordinateX + directionX] != 0) {\n//                 return true\n//             }\n//         }\n//     }\n//     return false;\n// }\n\n\n\n\n\n\n\n// placeRandomShip();\n\n\n//# sourceURL=webpack://battleship/./src/script.js?\n}");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((module) => {

eval("{\n\nclass Ship {\n    constructor(length, shipName, shipCoordinate, shipDirection, numberOfHits, sunk) {\n        this.length = length;\n        this.shipName = shipName\n        this.shipCoordinate = shipCoordinate\n        this.shipDirection = shipDirection\n        this.numberOfHits = 0;\n        this.sunk = false;\n\n    }\n\n    hit() {\n        this.numberOfHits += 1;\n        return this.numberOfHits;\n    }\n    isSunk() {\n        if (this.length <= this.numberOfHits) {\n            this.sunk = true;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showHits() {\n        return this.numberOfHits;\n    }\n}\n\nlet destroyer = new Ship(2)\n\nmodule.exports = { destroyer, Ship };\n\n//# sourceURL=webpack://battleship/./src/ship.js?\n}");

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ \"./node_modules/css-loader/dist/cjs.js!./src/styles.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://battleship/./src/styles.css?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.js");
/******/ 	
/******/ })()
;